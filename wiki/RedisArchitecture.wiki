#labels async,multi-thread
# 单线程异步处理事件，多线程处理IO

== Files Organize ==

 * anet.h/anet.c
{{{
网络通信
}}}

 * ae.h/ae.c,ae_select.c/ae_epoll.c/ae_kqueue.c
{{{
事件处理
}}}

 * adlist.h/adlist.c,dict.h/dict.c, zipmap.h/zipmap.c
{{{
主数据结构
}}}

 * zmalloc.h/zmalloc.c
{{{
内存分配
}}}


 * sds.h/sds.c
{{{
动态字符串处理
}}}

 * redis.h/redis.c
{{{
主函数
}}}

== Code Skeleton ==

* main
  * initServerConfig
{{{
参考：redis.c 

初始化redisServer中的一部分fields的value，下面仅列出对理解影响比较大的field.
static struct redisServer server;

dbnum          => REDIS_DEFAULT_DBNUM;
port           => REDIS_SERVERPORT
dbfilename     => dump.rdb
appendfilename => appendonly.aof
}}}
  * initServer
    * listCreate
{{{
参考：adlist.c
}}}
    * aeCreateEventLoop
{{{
参考：ae.c

为aeEventLoop结构体分配空间，对它的一些fields做一个简单的初始化
}}}
    * anetTcpServer
{{{
参考：anet.c

调用socket, bind, listen创建一个负责监听request的套接字
}}}
    * dictCreate
{{{
参考：dict.c

为dict结构体分配空间，对它的一些fields做一个简单的初始化
}}}
    * aeCreateTimeEvent
{{{
参考：ae.c

为aeTimeEvent结构体分配空间，初始化，然后将它放到eventLoop的timeEventHead链表的头，完成对timer event的注册
}}}
    * aeCreateFileEvent
{{{
参考：ae.c

初始化fd对应的aeFileEvent，完成对fd event的注册
}}}
      * acceptHandler
{{{
参考：redis.c

负责处理客户端的request
}}}
        * anetAccept
{{{
参考：anet.c

调用accept建立和客户端的连接
}}}
          * createClient
{{{
参考：redis.c

为redisClient结构体分配空间，初始化，以后所以和客户端打交道用到的数据都可以在这里找到。
}}}
            * anetNonBlock
{{{
参考：anet.c
}}}
            * anetTcpNoDelay
{{{
参考：anet.c
}}}
            * aeCreateFileEvent
{{{
参考：ae.c
}}}
              * readQueryFromClient
{{{
参考：redis.c

作为fd event的回调函数，当一个描述符可读的时候被调用，读取客户端发送来的数据，然后调用下面的函数处理，参数当然就是redisClient了。
}}}
                * processInputBuffer
{{{
参考：redis.c
}}}
                  *  processCommand
{{{
参考：redis.c
}}}
                     * lookupCommand
{{{
参考：redis.c
}}}
                       * queueMultiCommand
{{{
参考：redis.c
}}}
                       * addReply
{{{
参考：redis.c
}}}
                         * sendReplyToClient
{{{
参考：redis.c
}}}
                           * sendReplyToClientWritev
{{{
参考：redis.c
}}}
                           * write
                         * listAddNodeTail
{{{
参考：adlist.c
}}}
                     * call
            * selectDb
{{{
参考：redis.c
}}}
            * listAddNodeTail
{{{
参考：adlist.c
}}}

  * loadAppendOnlyFile
{{{
参考:redis.c

Only when the value of "server.appendonly" is true to execute this method

Replay the append log file. On error REDIS_ERR is returned. On non fatal
error (the append only file is zero-length) REDIS_OK is returned. On
fatal error an error message is logged and the program exists.
}}}
    * redis_fstat
{{{
#defined redis_fstat fstat
}}}
    * createFakeClient
{{{
The Redis commands are always executed in the context of a client, so in
order to load the append only file we need to create a fake client.
}}}
    * while statement
{{{
Read a line from append only file
Command lookup using "lookupCommand"
Call redisCommand's proc method to execute the command
Discard the reply objects list from the fake client
Clean up, ready for the next command
Handle swapping while loading big datasets when VM is on
}}}
    * freeFakeClient
{{{
Free the memory of redisClient
}}}

  * rdbLoad
{{{
参考:redis.c
}}}
  * aeMain
    * aeProcessEvents
{{{
参考：ae.c
}}}